diff --git a/OpenGL/OpenGL.vcxproj b/OpenGL/OpenGL.vcxproj
index 6dfae7f..b9ffc9c 100644
--- a/OpenGL/OpenGL.vcxproj
+++ b/OpenGL/OpenGL.vcxproj
@@ -50,6 +50,7 @@
       <PreprocessorDefinitions>GLEW_STATIC;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <ConformanceMode>true</ConformanceMode>
       <AdditionalIncludeDirectories>C:\Dev\OpenGL\OpenGL\Dependencies\OpenAL\include;$(SolutionDir)OpenGL\Dependencies\GLEW\include;$(SolutionDir)OpenGL\Dependencies\GLFW\include</AdditionalIncludeDirectories>
+      <LanguageStandard>stdcpp20</LanguageStandard>
     </ClCompile>
     <Link>
       <SubSystem>Console</SubSystem>
@@ -67,6 +68,7 @@
       <PreprocessorDefinitions>GLEW_STATIC;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
       <ConformanceMode>true</ConformanceMode>
       <AdditionalIncludeDirectories>C:\Dev\OpenGL\OpenGL\Dependencies\OpenAL\include;$(SolutionDir)OpenGL\Dependencies\GLEW\include;$(SolutionDir)OpenGL\Dependencies\GLFW\include</AdditionalIncludeDirectories>
+      <LanguageStandard>stdcpp20</LanguageStandard>
     </ClCompile>
     <Link>
       <SubSystem>Console</SubSystem>
diff --git a/OpenGL/src/Application.cpp b/OpenGL/src/Application.cpp
index 9852848..a5f7f34 100644
--- a/OpenGL/src/Application.cpp
+++ b/OpenGL/src/Application.cpp
@@ -110,7 +110,7 @@ int main(void)
     const GLFWvidmode* mode = glfwGetVideoMode(primaryMonitor);
 
     // Create a fullscreen window
-    GLFWwindow* window = glfwCreateWindow(mode->width, mode->height, "SpaceBoom", primaryMonitor, NULL);
+    GLFWwindow* window = glfwCreateWindow(mode->width, mode->height, "SpaceBoom", NULL, NULL);
     if (!window) {
         std::cerr << "Failed to create GLFW window" << std::endl;
         glfwTerminate();
diff --git a/OpenGL/src/Shader.h b/OpenGL/src/Shader.h
index 593b1bb..69c95b6 100644
--- a/OpenGL/src/Shader.h
+++ b/OpenGL/src/Shader.h
@@ -15,7 +15,7 @@ private:
 	std::string m_FilePath;
 	unsigned int m_RendererID;
 	std::unordered_map < std::string, int> m_UniformLocationCache;
-	// chaching for uniforms
+	// caching for uniforms
 
 public:
 	Shader(const std::string& filepath);
diff --git a/OpenGL/src/game_objects/GameObject.cpp b/OpenGL/src/game_objects/GameObject.cpp
index 2a00568..e00df85 100644
--- a/OpenGL/src/game_objects/GameObject.cpp
+++ b/OpenGL/src/game_objects/GameObject.cpp
@@ -14,6 +14,23 @@ void GameObject::update()
     
 }
 
+void GameObject::setUpShader(Renderer& renderer)
+{
+    if (shader.has_value()) {
+        int width, height;
+        glfwGetWindowSize(renderer.window, &width, &height); // Get the current window size
+        glViewport(0, 0, width, height);
+
+        /* Render here */
+        float currentTime = glfwGetTime(); // Or any other method to get the elapsed time
+
+        shader->Bind();
+        shader->SetUniform1f("u_AspectRatio", float(width) / float(height));
+        shader->SetUniform2f("u_Position", x, y);
+    }
+}
+
 void GameObject::render(Renderer& renderer) {
+    setUpShader(renderer);
     std::cout << "GameObject render was called" << std::endl;
 }
\ No newline at end of file
diff --git a/OpenGL/src/game_objects/GameObject.h b/OpenGL/src/game_objects/GameObject.h
index 3961077..d921dea 100644
--- a/OpenGL/src/game_objects/GameObject.h
+++ b/OpenGL/src/game_objects/GameObject.h
@@ -4,6 +4,7 @@
 #include <GLFW/glfw3.h>
 #include <iostream>
 #include <string>
+#include <optional>
 
 #include "../Renderer.h"
 #include "../VertexBuffer.h"
@@ -16,10 +17,11 @@ class GameObject {
 public:
     GameObject(const std::string& name, int drawPriority, float x, float y);
 
+    virtual void setUpShader(Renderer& renderer);
     virtual void render(Renderer& renderer);
     virtual void update();
 
-    Shader shader;
+    std::optional<Shader> shader;
 
     std::string name;
     int drawPriority;
diff --git a/OpenGL/src/game_objects/SquareObject.cpp b/OpenGL/src/game_objects/SquareObject.cpp
index 9307804..b6abc7b 100644
--- a/OpenGL/src/game_objects/SquareObject.cpp
+++ b/OpenGL/src/game_objects/SquareObject.cpp
@@ -8,7 +8,16 @@ SquareObject::SquareObject(const std::string& name, int drawPriority, float x, f
     shader = Shader("res/shaders/shader.shader");
 }
 
+void SquareObject::setUpShader(Renderer& renderer)
+{
+    GameObject::setUpShader(renderer);
+    shader->SetUniform4f("u_Color", r, g, b, 1.0f);
+}
+
 void SquareObject::render(Renderer& renderer) {
+    
+    GameObject::render(renderer);
+
     float positions[] = {
         -0.5f, -0.5f,
          0.5f, -0.5f,
@@ -34,19 +43,7 @@ void SquareObject::render(Renderer& renderer) {
 
     IndexBuffer ib(indices, 6);
 
-    int width, height;
-    glfwGetWindowSize(renderer.window, &width, &height); // Get the current window size
-    glViewport(0, 0, width, height);
-
-    /* Render here */
-    float currentTime = glfwGetTime(); // Or any other method to get the elapsed time
-
-    shader.Bind(); 
-    shader.SetUniform4f("u_Color", r, g, b, 1.0f);
-    shader.SetUniform1f("u_AspectRatio", float(width) / float(height));
-    shader.SetUniform2f("u_Position", x, y);
-
-    renderer.Draw(va, ib, shader);
+    renderer.Draw(va, ib, shader.value());
 
 }
 
diff --git a/OpenGL/src/game_objects/SquareObject.h b/OpenGL/src/game_objects/SquareObject.h
index de5794c..9c6f367 100644
--- a/OpenGL/src/game_objects/SquareObject.h
+++ b/OpenGL/src/game_objects/SquareObject.h
@@ -6,6 +6,7 @@ public:
     SquareObject(const std::string& name, int drawPriority, float x, float y);
     virtual void render(Renderer& renderer) override;
     virtual void update() override;
+    virtual void setUpShader(Renderer& renderer) override;
 protected:
     float r = 0;
     float g = 0;
